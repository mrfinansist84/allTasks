   describe(`Палиндром. Основная функция checkPalindrom.
   Проверяет есть ли у переданного числа в составе палиндром. Принимает 1 параметр - тип число.
   Если найдет - возвращает число-палиндром максимальной длинны, если нет вернет 0.`, function () {
       it('При введении числа: 5345354122145111. Функция найдет 4 палиндрома. Вернет один.', function () {
           assert.equal(checkPalindrom(5345354122145111), 54122145);
       });
       it('Не найдено ни одного палиндрома. Возвращает 0.', function () {
           assert.equal(checkPalindrom(53453), 0);
       });
   });

   describe(`Палиндром. Вспомогательная функция checkData.
  Проверка входного аргумента. Передано ли число, и его длинна не должна превышать 16 символов.`, function () {
       it('Введена строка вместо числа', function () {
           assert.deepEqual(checkData('5345354122145111'), {
               status: 'failed',
               reason: 'Wrong type of the arguments',
           });
       });
       it('Введено число более 16 символов', function () {
           assert.deepEqual(checkData(534535412214511111111111111), {
               status: 'failed',
               reason: 'Too small or too big length of argument',
           });
       });
   });

   describe(`Палиндром. Вспомогательная функция findLengthPal.
 Вычисляет максимальную длинну конкретного палиндрома. Принимаает 2 параметра: 
 str(тип строка) - проверочное число переведенное в строку с разделителями,
  i(тип число) потенциальный центр палинрома. 
  Возращает строку с числовым палиндромом и делителями между числами`, function () {
       it('Задана позиция 17. На ней возможен палиндром 54122145', function () {
           assert.equal(findLengthPal("5|3|4|5|3|5|4|1|2|2|1|4|5|1|1|1", 17), '|5|4|1|2|2|1|4|5|');
       });
   });